{
  "rules": {
    "minClientBuild": {
      ".read": "true",
      ".validate": "newData.isNumber()",
      "$other": {
        ".validate": false
      }
    },
    "system": {
      "minClientBuild": {
        ".read": "true",
        ".validate": "newData.isNumber()",
        "$other": {
          ".validate": false
        }
      },
      "minServerBuild": {
        ".read": "true",
        ".validate": "newData.isNumber()",
        "$other": {
          ".validate": false
        }
      },
      "oldestUsedClientBuild": {
        ".validate": "newData.isNumber()",
        "$other": {
          ".validate": false
        }
      },
      "oldestUsedServerBuild": {
        ".validate": "newData.isNumber()",
        "$other": {
          ".validate": false
        }
      },
      "maintenance": {
        "switch": {
          ".read": "true",
          ".validate": "newData.val() == true",
          "$other": {
            ".validate": false
          }
        },
        "message": {
          ".validate": "newData.isString()",
          "$other": {
            ".validate": false
          }
        },
        ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null",
        ".validate": "newData.hasChildren(['switch'])",
        "$other": {
          ".validate": false
        }
      },
      "uploadSecret": {
        ".validate": "newData.isString()",
        "$other": {
          ".validate": false
        }
      },
      "star": {
        ".validate": "newData.isString()",
        "$other": {
          ".validate": false
        }
      },
      "bang": {
        ".validate": "newData.isString()",
        "$other": {
          ".validate": false
        }
      },
      "keyCheck": {
        ".read": "true",
        ".validate": "newData.isString()",
        "$other": {
          ".validate": false
        }
      },
      "publicKey": {
        ".read": "true",
        ".validate": "newData.isString()",
        "$other": {
          ".validate": false
        }
      },
      "gheVersion": {
        ".read": "true",
        ".validate": "newData.isString()",
        "$other": {
          ".validate": false
        }
      },
      "ping": {
        ".write": "true",
        ".validate": "newData.val() == 1",
        "$other": {
          ".validate": false
        }
      },
      "$other": {
        ".validate": false
      }
    },
    "queues": {
      "github": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$eventKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "eventType": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "statusSyncKey": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "pusher": {
            "name": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            }
          },
          "member": {
            "login": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            }
          },
          "organization": {
            "login": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            }
          },
          "repository": {
            "name": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "full_name": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "owner": {
              "login": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              },
              "name": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              }
            }
          },
          ".write": "data.val() == null && !('reviewable-dev-anthony-fd713' == 'reviewable' || '' == 'enterprise')"
        },
        ".indexOn": [
          "_lease/expiry",
          "statusSyncKey"
        ]
      },
      "githubMergeableSync": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$prKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "owner": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "repo": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "prNumber": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "retryInterval": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['owner', 'repo', 'prNumber'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "githubPullRequestSync": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$prKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "userKey": {
            ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == newData.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server')",
            "$other": {
              ".validate": false
            }
          },
          "owner": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "repo": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "prNumber": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "updateReview": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "rewriteSoftRevisions": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "syncComments": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "syncStatus": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "overrideError": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "mustSucceed": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "overrideBadge": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "responseKeys": {
            "$responseKey": {
              ".validate": "newData.val() == true",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.parent().child('userKey').val() != null || !newData.hasChildren()"
          },
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          ".read": "data.val() == null || data.child('userKey').val() == (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)",
          ".write": "data.val() == null && newData.child('userKey').val() != null || data.child('userKey').val() == newData.child('userKey').val()",
          ".validate": "((newData.child('updateReview').val() == true || data.child('updateReview').val() == false || data.child('updateReview').val() == null) && (newData.child('rewriteSoftRevisions').val() == true || data.child('rewriteSoftRevisions').val() == false || data.child('rewriteSoftRevisions').val() == null) && (newData.child('syncComments').val() == true || data.child('syncComments').val() == false || data.child('syncComments').val() == null) && (newData.child('syncStatus').val() == true || data.child('syncStatus').val() == false || data.child('syncStatus').val() == null) && (newData.child('overrideError').val() == true || data.child('overrideError').val() == false || data.child('overrideError').val() == null) && (newData.child('mustSucceed').val() == true || data.child('mustSucceed').val() == false || data.child('mustSucceed').val() == null) && (newData.child('overrideBadge').val() == true || data.child('overrideBadge').val() == false || data.child('overrideBadge').val() == null)) && newData.hasChildren(['owner', 'repo', 'prNumber', 'timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "githubRenames": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$identityKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "source": {
            ".validate": "newData.isString() && (newData.val() == null || (newData.val() == null || newData.val().contains('\\x91')) || newData.val().toLowerCase() == newData.val())",
            "$other": {
              ".validate": false
            }
          },
          "target": {
            ".validate": "newData.isString() && (newData.val() == null || (newData.val() == null || newData.val().contains('\\x91')) || newData.val().toLowerCase() == newData.val())",
            "$other": {
              ".validate": false
            }
          },
          ".validate": "($identityKey.matches(/^(org|repo)-\\d+$/)) && newData.hasChildren(['source', 'target'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "reconciliation": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$prKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "owner": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "repo": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "prNumber": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "updateCompletion": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          ".write": "true",
          ".validate": "(newData.child('updateCompletion').val() == true || data.child('updateCompletion').val() == false || data.child('updateCompletion').val() == null) && newData.hasChildren(['owner', 'repo', 'prNumber', 'timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "reconciliationRefresh": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$prKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "owner": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "repo": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "prNumber": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "updateCompletion": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          ".validate": "(newData.child('updateCompletion').val() == true || data.child('updateCompletion').val() == false || data.child('updateCompletion').val() == null) && newData.hasChildren(['owner', 'repo', 'prNumber'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "stripe": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$eventKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "id": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "done": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          ".write": "data.val() == null && !('reviewable-dev-anthony-fd713' == 'reviewable' || '' == 'enterprise')",
          ".validate": "newData.hasChildren(['id'])"
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "memberships": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$organization": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "organization": {
            ".validate": "newData.isString() && (newData.val() == null || (newData.val() == null || newData.val().contains('\\x91')) || newData.val().toLowerCase() == newData.val())",
            "$other": {
              ".validate": false
            }
          },
          "subscribers": {
            "$subscriptionKey": {
              "subscriberKey": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              },
              "visibility": {
                ".validate": "newData.val() == 'public' || newData.val() == 'private' || newData.val() == '*'",
                "$other": {
                  ".validate": false
                }
              },
              "coverage": {
                ".validate": "newData.val() == 'team' || newData.val() == 'all'",
                "$other": {
                  ".validate": false
                }
              },
              "teamId": {
                ".validate": "newData.isNumber()",
                "$other": {
                  ".validate": false
                }
              },
              ".validate": "newData.hasChildren(['subscriberKey'])",
              "$other": {
                ".validate": false
              }
            }
          },
          ".validate": "($organization === (newData.child('organization').val() == null ? null : newData.child('organization').val().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09'))) && newData.hasChildren(['organization'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "requests": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$requestKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "action": {
            ".validate": "newData.val() == 'backfill' || newData.val() == 'backfillConnections' || newData.val() == 'checkCoverage' || newData.val() == 'connect' || newData.val() == 'debugFirebase' || newData.val() == 'disassociate' || newData.val() == 'disconnect' || newData.val() == 'enroll' || newData.val() == 'evaluate' || newData.val() == 'fillIssues' || newData.val() == 'fillUserProfile' || newData.val() == 'getReviewState' || newData.val() == 'initRepoSettings' || newData.val() == 'mintSimulatedToken' || newData.val() == 'reconcile' || newData.val() == 'reconnect' || newData.val() == 'saveCoupon' || newData.val() == 'subscribe' || newData.val() == 'syncCustomer' || newData.val() == 'unenroll' || newData.val() == 'upload' || newData.val() == 'updatePullRequest'",
            "$other": {
              ".validate": false
            }
          },
          "userKey": {
            ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == newData.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server')",
            "$other": {
              ".validate": false
            }
          },
          "ownerName": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "repoName": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "prNumber": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "reviewKey": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "type": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "planId": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "coverage": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "teamId": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "contributorTeamId": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "extraOrganizations": {
            "$index": {
              ".validate": "newData.isString() && $index.matches(/^\\d\\d?$/)",
              "$other": {
                ".validate": false
              }
            }
          },
          "personalMemo": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "stripeToken": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "username": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "userId": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "filter": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "errorCode": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "couponCode": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "fileName": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "size": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "code": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "context": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "debugFirebase": {
            "claims": {
              ".validate": "true"
            },
            "method": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "path": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "value": {
              ".validate": "true"
            },
            ".validate": "newData.hasChildren(['method', 'path'])",
            "$other": {
              ".validate": false
            }
          },
          ".write": "data.val() == null && (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null || data.child('action').val() == 'checkCoverage' && newData.child('action').val() == 'checkCoverage' && data.child('ownerName').val() == newData.child('ownerName').val() && data.child('repoName').val() == newData.child('repoName').val() && data.child('userKey').val() == newData.child('userKey').val() || data.child('action').val() == 'fillIssues' && newData.child('action').val() == 'fillIssues' && data.child('ownerName').val() == newData.child('ownerName').val() && data.child('repoName').val() == newData.child('repoName').val() || data.child('action').val() == 'evaluate' && newData.child('action').val() == 'evaluate' && data.child('ownerName').val() == newData.child('ownerName').val() && data.child('repoName').val() == newData.child('repoName').val() && data.child('userKey').val() == newData.child('userKey').val() && data.child('type').val() == newData.child('type').val() && data.child('reviewKey').val() == newData.child('reviewKey').val() && data.child('context').val() == newData.child('context').val() && data.child('code').val() == newData.child('code').val() || data.child('action').val() == 'fillUserProfile' && newData.child('action').val() == 'fillUserProfile' && data.child('userKey').val() == newData.child('userKey').val() && data.child('username').val() == newData.child('username').val() && data.child('userId').val() == newData.child('userId').val()",
          ".validate": "newData.hasChildren(['action', 'userKey'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "responses": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$requestKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "userKey": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "outcome": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "error": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "result": {
            "state": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "upload": {
              "form": {
                "key": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "path": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                }
              }
            },
            "download": {
              "url": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              },
              "$other": {
                ".validate": false
              }
            }
          },
          ".read": "data.val() == null || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == data.child('userKey').val()",
          ".write": "newData.val() == null && (data.val() == null || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == data.child('userKey').val())",
          ".validate": "newData.hasChildren(['userKey', 'outcome'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "polls": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$pollKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "index": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['index'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "cron": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$taskKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "interval": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "checkpointKey": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "counters": {
            "$counter": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            }
          },
          "lastResult": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['interval'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry"
        ]
      },
      "permissions": {
        "ping": {
          "timestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "_lease": {
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        "$permissionKey": {
          "_lease": {
            "initial": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "time": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "attempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".write": "newData.val() == null && (data.val() == null || data.parent().child('userKey').val() == (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) || data.parent().child('userKey').val() == null)",
            ".validate": "newData.hasChildren(['expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "ownerName": {
            ".write": "true",
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "repoName": {
            ".write": "true",
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "userKey": {
            ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (data.val() == null || data.val() == (auth.token.expires === null || auth.token.expires > now ? auth.uid : null))",
            ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == newData.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server')",
            "$other": {
              ".validate": false
            }
          },
          "timestamp": {
            ".write": "true",
            ".validate": "newData.isNumber() && (now - newData.val() > -10000 && now - newData.val() < 10000 || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server')",
            "$other": {
              ".validate": false
            }
          },
          "scopes": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "writeTimestamp": {
            ".write": "true",
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "verdict": {
            "pull": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "push": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "admin": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "member": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "own": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "error": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          "verdicts": {
            "$ownerName": {
              "$repoName": {
                "pull": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "push": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "admin": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                ".validate": "$repoName == null || ($repoName == null || $repoName.contains('\\x91')) || $repoName.toLowerCase() == $repoName",
                "$other": {
                  ".validate": false
                }
              },
              ".validate": "$ownerName == null || ($ownerName == null || $ownerName.contains('\\x91')) || $ownerName.toLowerCase() == $ownerName"
            }
          },
          ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == data.child('userKey').val() || data.child('userKey').val() == null || data.val() == null && ($permissionKey.endsWith('|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)) || $permissionKey.endsWith('*'))",
          ".write": "newData.val() == null && (data.val() == null || data.child('userKey').val() == null && data.child('verdict').child('pull').val() != true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == data.child('userKey').val())",
          ".validate": "newData.hasChildren(['ownerName', 'repoName', 'timestamp'])",
          "$other": {
            ".validate": false
          }
        },
        ".indexOn": [
          "_lease/expiry",
          "userKey"
        ]
      },
      "$other": {
        ".validate": false
      }
    },
    "enrollments": {
      "numTasks": {
        ".validate": "newData.isNumber()",
        "$other": {
          ".validate": false
        }
      },
      "list": {
        "$enrollmentKey": {
          "userKey": {
            ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || root.child('users').hasChild(newData.val()))",
            "$other": {
              ".validate": false
            }
          },
          "type": {
            ".validate": "newData.val() == 'public' || newData.val() == 'private' || newData.val() == 'personal'",
            "$other": {
              ".validate": false
            }
          },
          ".validate": "($enrollmentKey == newData.child('userKey').val() + '|' + newData.child('type').val()) && newData.hasChildren(['userKey', 'type'])",
          "$other": {
            ".validate": false
          }
        }
      },
      "$other": {
        ".validate": false
      }
    },
    "identities": {
      "$key": {
        "id": {
          ".validate": "newData.isNumber()",
          "$other": {
            ".validate": false
          }
        },
        "name": {
          ".validate": "newData.isString() && (newData.val() == null || (newData.val() == null || newData.val().contains('\\x91')) || newData.val().toLowerCase() == newData.val()) && (newData.val() == null || newData.val().contains('\\x91') || $key.beginsWith(newData.val().contains('/') ? 'repo-' : 'org-'))",
          "$other": {
            ".validate": false
          }
        },
        ".validate": "($key == 'org-' + newData.child('id').val() || $key == 'repo-' + newData.child('id').val()) && newData.hasChildren(['id', 'name'])",
        "$other": {
          ".validate": false
        }
      },
      ".indexOn": [
        "name"
      ]
    },
    "organizations": {
      "$organization": {
        "autoConnect": {
          "connectorKey": {
            ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == newData.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server')",
            "$other": {
              ".validate": false
            }
          },
          "error": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          ".read": "root.child('queues').child('permissions').child($organization + '|' + (root.child('system').child('bang').val() == null ? '!' : root.child('system').child('bang').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('member').val() == true",
          ".write": "root.child('queues').child('permissions').child($organization + '|' + (root.child('system').child('bang').val() == null ? '!' : root.child('system').child('bang').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('own').val() == true",
          "$other": {
            ".validate": false
          }
        },
        "prototypeRepository": {
          "name": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "connectorKey": {
            ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == newData.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server')",
            "$other": {
              ".validate": false
            }
          },
          ".read": "root.child('queues').child('permissions').child($organization + '|' + (root.child('system').child('bang').val() == null ? '!' : root.child('system').child('bang').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('own').val() == true",
          ".write": "root.child('queues').child('permissions').child($organization + '|' + (root.child('system').child('bang').val() == null ? '!' : root.child('system').child('bang').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('own').val() == true",
          ".validate": "newData.hasChildren(['name', 'connectorKey'])",
          "$other": {
            ".validate": false
          }
        },
        "owners": {
          "$userKey": {
            ".validate": "newData.val() == true",
            "$other": {
              ".validate": false
            }
          }
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "repositories": {
      "$ownerName": {
        "$repoName": {
          "core": {
            "id": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "renamed": {
              "ownerName": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              },
              "repoName": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              },
              ".validate": "newData.hasChildren(['ownerName', 'repoName'])",
              "$other": {
                ".validate": false
              }
            },
            "connection": {
              ".validate": "newData.val() == 'active' || newData.val() == 'closed' || newData.val() == 'broken'",
              "$other": {
                ".validate": false
              }
            },
            "connector": {
              ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || root.child('users').hasChild(newData.val()))",
              "$other": {
                ".validate": false
              }
            },
            "settings": {
              "reviewableBadge": {
                ".validate": "newData.val() == 'none' || newData.val() == 'pullRequest' || newData.val() == 'comment'",
                "$other": {
                  ".validate": false
                }
              },
              "badgePullRequestLocation": {
                ".validate": "newData.val() == 'top' || newData.val() == 'bottom'",
                "$other": {
                  ".validate": false
                }
              },
              "commentBadgeUserKey": {
                ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || root.child('users').hasChild(newData.val()))",
                "$other": {
                  ".validate": false
                }
              },
              "revisionSplitStrategy": {
                ".validate": "newData.val() == 'combinedCommits' || newData.val() == 'onePerCommit'",
                "$other": {
                  ".validate": false
                }
              },
              "lgtmText": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              },
              "gitHubStatusUpdates": {
                ".validate": "newData.val() == 'always' || newData.val() == 'accessed' || newData.val() == 'never'",
                "$other": {
                  ".validate": false
                }
              },
              "mergeFlavors": {
                "merge": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "squash": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "fastForward": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                ".validate": "newData.child('merge').val() != false || newData.child('squash').val() != false || newData.child('fastForward').val() != false",
                "$other": {
                  ".validate": false
                }
              },
              "discussionDismissalRestriction": {
                ".validate": "newData.val() == 'push' || newData.val() == 'admin'",
                "$other": {
                  ".validate": false
                }
              },
              "includeObsoleteFilesInConditionState": {
                ".validate": "newData.isBoolean()",
                "$other": {
                  ".validate": false
                }
              },
              ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || $ownerName != null && $repoName != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + '*').child('verdict').child('admin').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('admin').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child($ownerName).child($repoName).child('admin').val() == true))",
              "$other": {
                ".validate": false
              }
            },
            "overlapOtherReviewers": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "maxNewRevisionsPerPush": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "reviewableBadge": {
              ".validate": "newData.val() == data.val() || newData.val() == null",
              "$other": {
                ".validate": false
              }
            },
            "errorCode": {
              ".validate": "newData.val() == 'badauth' || newData.val() == 'notadmin' || newData.val() == 'thirdparty' || newData.val() == 'nosub' || newData.val() == 'overquota' || newData.val() == 'notfound'",
              "$other": {
                ".validate": false
              }
            },
            "error": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "hookEvents": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || $ownerName != null && $repoName != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child($ownerName).child($repoName).child('pull').val() == true))",
            "$other": {
              ".validate": false
            }
          },
          "adminUserKeys": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "pushUserKeys": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "current": {
            "openPullRequestsCount": {
              ".validate": "newData.isNumber() && newData.val() >= 0",
              "$other": {
                ".validate": false
              }
            },
            "openPullRequests": {
              "$pullRequestId": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              }
            },
            ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || $ownerName != null && $repoName != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child($ownerName).child($repoName).child('pull').val() == true))",
            ".validate": "newData.hasChildren(['openPullRequestsCount'])",
            "$other": {
              ".validate": false
            }
          },
          "pullRequests": {
            "$pullRequestId": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || $ownerName != null && $repoName != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child($ownerName).child($repoName).child('pull').val() == true))"
          },
          "oldPullRequests": {
            "$pullRequestId": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            }
          },
          "issues": {
            "lastSyncTimestamp": {
              ".validate": "newData.isNumber() && now - newData.val() > -5000 && now - newData.val() < 5000",
              "$other": {
                ".validate": false
              }
            },
            "index": {
              "$issueNumber": {
                "title": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "state": {
                  ".validate": "newData.val() == 'open' || newData.val() == 'closed'",
                  "$other": {
                    ".validate": false
                  }
                },
                "creatorKey": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "type": {
                  ".validate": "newData.val() == 'issue' || newData.val() == 'pr'",
                  "$other": {
                    ".validate": false
                  }
                },
                ".validate": "newData.hasChildren(['title', 'state', 'creatorKey', 'type'])",
                "$other": {
                  ".validate": false
                }
              }
            },
            ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || $ownerName != null && $repoName != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child($ownerName).child($repoName).child('pull').val() == true))",
            "$other": {
              ".validate": false
            }
          },
          "protection": {
            "$branch": {
              "enforce_admins": {
                "enabled": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "$other": {
                  ".validate": false
                }
              },
              "required_status_checks": {
                "include_admins": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "strict": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "contexts": {
                  "$i": {
                    ".validate": "newData.isString()",
                    "$other": {
                      ".validate": false
                    }
                  }
                },
                "$other": {
                  ".validate": false
                }
              },
              "required_pull_request_reviews": {
                "dismissal_restrictions": {
                  "users": {
                    "$i": {
                      "login": {
                        ".validate": "newData.isString()",
                        "$other": {
                          ".validate": false
                        }
                      },
                      "id": {
                        ".validate": "newData.isNumber()",
                        "$other": {
                          ".validate": false
                        }
                      },
                      "$other": {
                        ".validate": false
                      }
                    }
                  },
                  "teams": {
                    "$i": {
                      "slug": {
                        ".validate": "newData.isString()",
                        "$other": {
                          ".validate": false
                        }
                      },
                      "id": {
                        ".validate": "newData.isNumber()",
                        "$other": {
                          ".validate": false
                        }
                      },
                      "$other": {
                        ".validate": false
                      }
                    }
                  },
                  "$other": {
                    ".validate": false
                  }
                },
                "dismiss_stale_reviews": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "require_code_owner_reviews": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "required_approving_review_count": {
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                "$other": {
                  ".validate": false
                }
              },
              "restrictions": {
                "users": {
                  "$i": {
                    "login": {
                      ".validate": "newData.isString()",
                      "$other": {
                        ".validate": false
                      }
                    },
                    "id": {
                      ".validate": "newData.isNumber()",
                      "$other": {
                        ".validate": false
                      }
                    },
                    "$other": {
                      ".validate": false
                    }
                  }
                },
                "teams": {
                  "$i": {
                    "slug": {
                      ".validate": "newData.isString()",
                      "$other": {
                        ".validate": false
                      }
                    },
                    "id": {
                      ".validate": "newData.isNumber()",
                      "$other": {
                        ".validate": false
                      }
                    },
                    "$other": {
                      ".validate": false
                    }
                  }
                },
                "$other": {
                  ".validate": false
                }
              },
              "$other": {
                ".validate": false
              }
            },
            ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || $ownerName != null && $repoName != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + '*').child('verdict').child('admin').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('admin').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child($ownerName).child($repoName).child('admin').val() == true))"
          },
          ".validate": "$repoName == null || ($repoName == null || $repoName.contains('\\x91')) || $repoName.toLowerCase() == $repoName",
          "$other": {
            ".validate": false
          }
        },
        ".validate": "$ownerName == null || ($ownerName == null || $ownerName.contains('\\x91')) || $ownerName.toLowerCase() == $ownerName"
      }
    },
    "badConnections": {
      "$ownerRepoName": {
        "ownerName": {
          ".validate": "newData.isString() && (newData.val() == null || (newData.val() == null || newData.val().contains('\\x91')) || newData.val().toLowerCase() == newData.val())",
          "$other": {
            ".validate": false
          }
        },
        "repoName": {
          ".validate": "newData.isString() && (newData.val() == null || (newData.val() == null || newData.val().contains('\\x91')) || newData.val().toLowerCase() == newData.val())",
          "$other": {
            ".validate": false
          }
        },
        "connectorKey": {
          ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || root.child('users').hasChild(newData.val()))",
          "$other": {
            ".validate": false
          }
        },
        "timestamp": {
          ".validate": "newData.isNumber()",
          "$other": {
            ".validate": false
          }
        },
        ".validate": "($ownerRepoName == null || $ownerRepoName.contains('\\x91') || $ownerRepoName == (newData.child('ownerName').val() == null ? null : newData.child('ownerName').val().toLowerCase() == null ? null : newData.child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (newData.child('repoName').val() == null ? null : newData.child('repoName').val().toLowerCase() == null ? null : newData.child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09'))) && newData.hasChildren(['ownerName', 'repoName', 'connectorKey', 'timestamp'])",
        "$other": {
          ".validate": false
        }
      },
      ".indexOn": [
        "ownerName",
        "connectorKey"
      ]
    },
    "reviews": {
      "$reviewKey": {
        "core": {
          "ownerName": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "repoName": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "pullRequestId": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "pullRequestTimestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "state": {
            ".validate": "newData.val() == 'open' || newData.val() == 'closed' || newData.val() == 'merged'",
            "$other": {
              ".validate": false
            }
          },
          "lastAccessTimestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "lastSweepTimestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "revisionSplitStrategy": {
            ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('push').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('push').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('push').val() == true))",
            ".validate": "newData.val() == 'combinedCommits' || newData.val() == 'onePerCommit'",
            "$other": {
              ".validate": false
            }
          },
          "branch": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "branchRepoName": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "baseBranch": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "baseBranchHeadSha": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "lastRevisionKey": {
            ".validate": "newData.isString() && newData.parent().parent().child('revisions').hasChild(newData.val())",
            "$other": {
              ".validate": false
            }
          },
          "authorKey": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "assigneeKey": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "assignees": {
            "$userKey": {
              ".validate": "newData.val() == true",
              "$other": {
                ".validate": false
              }
            },
            ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('push').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('push').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('push').val() == true))"
          },
          "assigneesMerged": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "title": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "commitCount": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "fileCount": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "error": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          ".validate": "(newData.val() != null && (data.child('lastAccessTimestamp').val() == null || newData.child('lastAccessTimestamp').val() != null)) && newData.hasChildren(['ownerName', 'repoName', 'pullRequestId', 'state', 'authorKey'])",
          "$other": {
            ".validate": false
          }
        },
        "security": {
          "lowerCaseOwnerName": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "lowerCaseRepoName": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "$other": {
            ".validate": false
          }
        },
        "participants": {
          "$userKey": {
            "author": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "assignee": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "requestedReviewer": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "localMentionee": {
              ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey && newData.val() == true && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true)))",
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "blocker": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "sanction": {
              ".validate": "newData.val() == 'approved' || newData.val() == 'changes_requested' || newData.val() == 'commented' || newData.val() == 'dismissed' || newData.val() == 'pending'",
              "$other": {
                ".validate": false
              }
            },
            "draftsPending": {
              ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey && (newData.val() == null || ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true))))",
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "lastUpdateTimestamp": {
              ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true)))",
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          }
        },
        "requestedTeams": {
          "$nodeId": {
            "slug": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "name": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "id": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['slug', 'name', 'id'])",
            "$other": {
              ".validate": false
            }
          }
        },
        "updates": {
          "assigneesTimestamp": {
            ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('push').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('push').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('push').val() == true))",
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "requestedReviewersTimestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "labelsTimestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "milestoneTimestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "$other": {
            ".validate": false
          }
        },
        "revisions": {
          "$revisionKey": {
            "priorRevisionKey": {
              ".validate": "newData.isString() && newData.parent().parent().parent().child('revisions').child(newData.val()).val() != null",
              "$other": {
                ".validate": false
              }
            },
            "commitSha": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "baseCommitSha": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "equivalentCommitShas": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "equivalentBaseCommitShas": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "commitTimestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "obsolete": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "capturerKey": {
              ".write": "(data.val() == null || newData.val() != null || data.val() == newData.val()) && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true)))",
              ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == newData.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server') || data.val() == newData.val()",
              "$other": {
                ".validate": false
              }
            },
            "softCapturerKey": {
              ".write": "(data.val() == null || newData.val() != null || data.val() == newData.val()) && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true)))",
              ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == newData.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server') || data.val() == newData.val()",
              "$other": {
                ".validate": false
              }
            },
            "captureTimestamp": {
              ".write": "(data.val() == null || data.val() == newData.val()) && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true)))",
              ".validate": "newData.isNumber() && (now - newData.val() > -10000 && now - newData.val() < 10000 || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server') || data.val() == newData.val()",
              "$other": {
                ".validate": false
              }
            },
            "commits": {
              "$arbitraryKey": {
                "timestamp": {
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                "sha": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "title": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "authorKey": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "committerKey": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                ".validate": "newData.hasChildren(['timestamp', 'sha', 'title'])",
                "$other": {
                  ".validate": false
                }
              }
            },
            ".validate": "newData.hasChildren(['commitSha', 'baseCommitSha', 'commitTimestamp'])",
            "$other": {
              ".validate": false
            }
          }
        },
        "files": {
          "$fileKey": {
            "path": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "group": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "revisions": {
              "$revisionKey": {
                "action": {
                  ".validate": "newData.val() == 'added' || newData.val() == 'modified' || newData.val() == 'removed' || newData.val() == 'kept'",
                  "$other": {
                    ".validate": false
                  }
                },
                "fileSha": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "baseFileSha": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "fileMode": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "baseFileMode": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "type": {
                  ".validate": "newData.val() == 'blob' || newData.val() == 'commit'",
                  "$other": {
                    ".validate": false
                  }
                },
                "reviewed": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "reviewers": {
                  "$userKey": {
                    ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
                    ".validate": "root.child('users').hasChild($userKey) && (newData.val() == true || newData.isNumber() && (now - newData.val() > -10000 && now - newData.val() < 10000 || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server'))",
                    "$other": {
                      ".validate": false
                    }
                  }
                },
                ".validate": "newData.hasChildren(['action'])",
                "$other": {
                  ".validate": false
                }
              }
            },
            ".validate": "newData.hasChildren(['path'])",
            "$other": {
              ".validate": false
            }
          }
        },
        "metaFiles": {
          "$fileKey": {
            "path": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "revisions": {
              "$revisionKey": {
                ".validate": "newData.isString() && ($revisionKey === 'other' || newData.parent().parent().parent().parent().child('revisions').hasChild($revisionKey))",
                "$other": {
                  ".validate": false
                }
              }
            },
            ".validate": "newData.hasChildren(['path'])",
            "$other": {
              ".validate": false
            }
          }
        },
        "discussions": {
          "$discussionKey": {
            "revisionKey": {
              ".validate": "newData.isString() && newData.parent().parent().parent().child('revisions').hasChild(newData.val())",
              "$other": {
                ".validate": false
              }
            },
            "revisionBase": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "otherRevisionKey": {
              ".validate": "newData.isString() && newData.parent().parent().parent().child('revisions').hasChild(newData.val())",
              "$other": {
                ".validate": false
              }
            },
            "otherRevisionBase": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "fileKey": {
              ".validate": "newData.isString() && newData.parent().parent().parent().child('files').hasChild(newData.val())",
              "$other": {
                ".validate": false
              }
            },
            "line": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "comments": {
              "$commentKey": {
                "authorKey": {
                  ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == newData.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server')",
                  "$other": {
                    ".validate": false
                  }
                },
                "markdownBody": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "htmlBody": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "timestamp": {
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                "draftTimestamp": {
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                "provenance": {
                  ".validate": "newData.val() == 'synthetic' || newData.val() == 'github' || newData.val() == 'email'",
                  "$other": {
                    ".validate": false
                  }
                },
                ".write": "(data.val() == null || data.child('authorKey').val() == newData.child('authorKey').val() && data.child('markdownBody').val() == newData.child('markdownBody').val() && data.child('htmlBody').val() == newData.child('htmlBody').val() && newData.child('timestamp').val() - data.child('timestamp').val() < 5 * 60 * 1000 && data.child('draftTimestamp').val() == newData.child('draftTimestamp').val() && data.child('provenance').val() == newData.child('provenance').val()) && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true)))",
                ".validate": "newData.hasChildren(['authorKey', 'markdownBody', 'htmlBody', 'timestamp'])",
                "$other": {
                  ".validate": false
                }
              }
            },
            ".write": "data.val() == null && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true)))",
            ".validate": "newData.hasChildren(['timestamp'])",
            "$other": {
              ".validate": false
            }
          }
        },
        "gitHubComments": {
          "$commentId": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['timestamp'])",
            "$other": {
              ".validate": false
            }
          }
        },
        "tracker": {
          "$discussionKey": {
            "firstAuthorKey": {
              ".write": "((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true))) && newData.val() == (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)",
              ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == newData.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server') && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || data.parent().child('participants').val() == null) && newData.parent().child('participants').child(newData.val()).child('role').val() != null",
              "$other": {
                ".validate": false
              }
            },
            "participants": {
              "$userKey": {
                "timestamp": {
                  ".validate": "newData.isNumber() && (data.val() == null || newData.val() >= data.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server') && now - newData.val() > -10000",
                  "$other": {
                    ".validate": false
                  }
                },
                "lastPostTimestamp": {
                  ".validate": "newData.isNumber() && (data.val() == null || newData.val() >= data.val() || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server') && now - newData.val() > -10000",
                  "$other": {
                    ".validate": false
                  }
                },
                "acceptedTimestamp": {
                  ".validate": "newData.isNumber() && (newData.val() + 1 == newData.val() || newData.val() <= newData.parent().child('timestamp').val()) && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (data.val() == null || data.val() == data.val() + 1 ? data.parent().child('timestamp').val() == null ? true : newData.val() >= data.parent().child('timestamp').val() : newData.val() >= data.val()))",
                  "$other": {
                    ".validate": false
                  }
                },
                "lastObjectionTimestamp": {
                  ".validate": "newData.isNumber() && newData.val() <= newData.parent().child('lastPostTimestamp').val() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (data.val() == null ? data.parent().child('lastPostTimestamp').val() == null ? true : newData.val() >= data.parent().child('lastPostTimestamp').val() : newData.val() >= data.val()))",
                  "$other": {
                    ".validate": false
                  }
                },
                "role": {
                  ".write": "newData.val() == 'following' && data.val() == null && $userKey == newData.parent().parent().parent().parent().parent().child('core').child('authorKey').val() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true))) || newData.val() == 'mentioned' || newData.val() == 'dismissed'",
                  ".validate": "(newData.val() == 'following' || newData.val() == 'mentioned' || newData.val() == 'dismissed' || newData.val() == 'withdrawn' || newData.val() == 'satisfied' || newData.val() == 'discussing' || newData.val() == 'blocking' || newData.val() == 'working' || newData.val() == 'informing') && ($discussionKey != '-top' || newData.val() == 'following' || newData.val() == 'mentioned') && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (newData.val() != 'following' || data.val() == null || data.val() == 'following' || data.val() == 'mentioned' || data.val() == 'dismissed') && (newData.val() != 'mentioned' || (data.val() == null || data.val() == 'following' || data.val() == 'mentioned') && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true))) && $userKey != (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)) && (newData.val() != 'dismissed' || newData.parent().child('dismisserKey').val() != null && $userKey != (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) && ((data.val() == 'satisfied' || data.val() == 'discussing' || data.val() == 'blocking' || data.val() == 'working' || data.val() == 'informing') && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child(root.child('repositories').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('core').child('settings').child('discussionDismissalRestriction').val() === null ? 'push' : root.child('repositories').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('core').child('settings').child('discussionDismissalRestriction').val()).val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child(root.child('repositories').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('core').child('settings').child('discussionDismissalRestriction').val() === null ? 'push' : root.child('repositories').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('core').child('settings').child('discussionDismissalRestriction').val()).val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('repositories').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('core').child('settings').child('discussionDismissalRestriction').val() === null ? 'push' : root.child('repositories').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('core').child('settings').child('discussionDismissalRestriction').val()).val() == true))) || data.val() == 'dismissed')))",
                  "$other": {
                    ".validate": false
                  }
                },
                "roleTimestamp": {
                  ".write": "newData.parent().child('role').val() != data.parent().child('role').val() || newData.val() == data.val()",
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                "forced": {
                  ".write": "data.parent().child('role').val() == null && newData.parent().child('role').val() == 'following' && $userKey == newData.parent().parent().parent().parent().parent().child('core').child('authorKey').val() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true))) && newData.val() == true",
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "dismisserKey": {
                  ".write": "newData.parent().child('role').val() == 'dismissed' && newData.val() == (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) || newData.parent().child('role').val() != 'dismissed' && newData.val() == null",
                  ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || root.child('users').hasChild(newData.val()))",
                  "$other": {
                    ".validate": false
                  }
                },
                ".write": "((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true))) && $userKey == (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)",
                ".validate": "((!data.hasChild('timestamp') || newData.hasChild('timestamp')) && (!data.hasChild('lastPostTimestamp') || newData.hasChild('lastPostTimestamp'))) && newData.hasChildren(['role', 'roleTimestamp'])",
                "$other": {
                  ".validate": false
                }
              }
            },
            "$other": {
              ".validate": false
            }
          }
        },
        "labels": {
          "$label": {
            ".validate": "newData.val() == true",
            "$other": {
              ".validate": false
            }
          }
        },
        "milestone": {
          ".validate": "newData.isString()",
          "$other": {
            ".validate": false
          }
        },
        "sentiments": {
          "$userKey": {
            "comments": {
              "$commentKey": {
                "emojis": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "timestamp": {
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                ".validate": "newData.hasChildren(['timestamp'])",
                "$other": {
                  ".validate": false
                }
              }
            },
            ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
            "$other": {
              ".validate": false
            }
          }
        },
        "statuses": {
          "$revisionKey": {
            "combinedState": {
              ".validate": "newData.val() == 'error' || newData.val() == 'failure' || newData.val() == 'inprogress' || newData.val() == 'missing' || newData.val() == 'pending' || newData.val() == 'success'",
              "$other": {
                ".validate": false
              }
            },
            "counts": {
              "$state": {
                ".validate": "newData.isNumber()",
                "$other": {
                  ".validate": false
                }
              }
            },
            "services": {
              "$context": {
                "state": {
                  ".validate": "newData.val() == 'error' || newData.val() == 'failure' || newData.val() == 'inprogress' || newData.val() == 'missing' || newData.val() == 'pending' || newData.val() == 'success'",
                  "$other": {
                    ".validate": false
                  }
                },
                "context": {
                  ".validate": "newData.isString() && (newData.val() == null || newData.val().contains('\\x91') || $context == (newData.val() == null ? null : newData.val().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) || newData.val() == '')",
                  "$other": {
                    ".validate": false
                  }
                },
                "required": {
                  ".validate": "newData.val() == 'non_admins' || newData.val() == 'everyone'",
                  "$other": {
                    ".validate": false
                  }
                },
                "description": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "url": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "numAnnotations": {
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                "pendingReviewers": {
                  ".validate": "newData.isString() && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == 'code-review/reviewable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "gitHubApprovalsDisabled": {
                  ".validate": "newData.isBoolean() && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == 'code-review/reviewable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "autoRequestReviewers": {
                  ".validate": "newData.isBoolean() && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == 'code-review/reviewable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "branchUpdatesDisabled": {
                  ".validate": "newData.isBoolean() && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == 'code-review/reviewable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "defaultMergeCommitMessage": {
                  ".validate": "newData.isString() && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == 'code-review/reviewable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "defaultSquashCommitMessage": {
                  ".validate": "newData.isString() && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == 'code-review/reviewable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "mergeFlavor": {
                  ".validate": "(newData.val() == 'merge' || newData.val() == 'squash' || newData.val() == 'rebase') && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == 'code-review/reviewable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "fastForwardAllowed": {
                  ".validate": "newData.isBoolean() && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == ' mergeable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "rebaseAllowed": {
                  ".validate": "newData.isBoolean() && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == ' mergeable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "branchNeedsUpdate": {
                  ".validate": "newData.isBoolean() && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == ' mergeable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "branchProtected": {
                  ".validate": "newData.isBoolean() && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == ' mergeable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "condition": {
                  ".validate": "(newData.val() == 'dirty' || newData.val() == 'unknown' || newData.val() == 'blocked' || newData.val() == 'behind' || newData.val() == 'unstable' || newData.val() == 'has_hooks' || newData.val() == 'clean' || newData.val() == 'draft') && (newData.parent().child('context').val() == null || newData.parent().child('context').val().contains('\\x91') || newData.parent().child('context').val() == ' mergeable')",
                  "$other": {
                    ".validate": false
                  }
                },
                "timestamp": {
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                ".validate": "newData.hasChildren(['state', 'context', 'description', 'timestamp'])",
                "$other": {
                  ".validate": false
                }
              }
            },
            "$other": {
              ".validate": false
            }
          }
        },
        ".read": "data.val() == null || ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true)))",
        "$other": {
          ".validate": false
        }
      }
    },
    "filemaps": {
      "$reviewKey": {
        "$leftShaRightSha": {
          "$fileKey": {
            "key": {
              ".validate": "root.child('reviews').child($reviewKey).child('files').hasChild(newData.val())",
              "$other": {
                ".validate": false
              }
            },
            "sha": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "(root.child('reviews').child($reviewKey).child('files').hasChild($fileKey)) && newData.hasChildren(['key', 'sha'])",
            "$other": {
              ".validate": false
            }
          },
          "done": {
            ".validate": "newData.val() == ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('push').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('push').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('push').val() == true)) ? true : 'untrusted')",
            "$other": {
              ".validate": false
            }
          },
          ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('push').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('push').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('push').val() == true)) || ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true))) && (data.val() == null || data.child('done').val() == 'untrusted') && newData.child('done').val() == 'untrusted'",
          ".validate": "newData.hasChildren(['done'])"
        },
        ".read": "data.val() == null || ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true)))"
      }
    },
    "linemaps": {
      "$reviewKey": {
        "$leftShaRightSha": {
          "$entryKey": {
            "type": {
              ".validate": "newData.val() == 'bijection' || newData.val() == 'bottom'",
              "$other": {
                ".validate": false
              }
            },
            "accuracy": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "leftStart": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "leftEnd": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "rightStart": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "rightEnd": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['type', 'accuracy', 'leftEnd', 'rightEnd'])",
            "$other": {
              ".validate": false
            }
          }
        },
        ".read": "data.val() == null || ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('pull').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('pull').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('pull').val() == true)))",
        ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || (root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + '*').child('verdict').child('push').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child((root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('push').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseOwnerName').val() : root.child('reviews').child($reviewKey).child('core').child('ownerName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('ownerName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child(root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() != null ? root.child('reviews').child($reviewKey).child('security').child('lowerCaseRepoName').val() : root.child('reviews').child($reviewKey).child('core').child('repoName').val() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase() == null ? null : root.child('reviews').child($reviewKey).child('core').child('repoName').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')).child('push').val() == true))"
      }
    },
    "archivedReviews": {
      "$reviewKey": {
        "timestamp": {
          ".validate": "newData.isNumber()",
          "$other": {
            ".validate": false
          }
        },
        "archivalTimestamp": {
          ".validate": "newData.isNumber()",
          "$other": {
            ".validate": false
          }
        },
        "payload": {
          ".validate": "newData.isString()",
          "$other": {
            ".validate": false
          }
        },
        ".validate": "newData.hasChildren(['timestamp', 'archivalTimestamp', 'payload'])",
        "$other": {
          ".validate": false
        }
      }
    },
    "subscriptions": {
      "$subscriptionId": {
        "subscriberKey": {
          ".validate": "newData.isString() && ((auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || root.child('users').hasChild(newData.val()))",
          "$other": {
            ".validate": false
          }
        },
        "organization": {
          ".validate": "newData.isString() && (newData.val() == null || (newData.val() == null || newData.val().contains('\\x91')) || newData.val().toLowerCase() == newData.val())",
          "$other": {
            ".validate": false
          }
        },
        "visibility": {
          ".validate": "newData.val() == '*' || newData.val() == 'public' || newData.val() == 'private'",
          "$other": {
            ".validate": false
          }
        },
        "masterSubscriptionKey": {
          ".validate": "newData.isString()",
          "$other": {
            ".validate": false
          }
        },
        "stripe": {},
        "coverage": {
          ".validate": "newData.val() == 'solo' || newData.val() == 'team' || newData.val() == 'all'",
          "$other": {
            ".validate": false
          }
        },
        "teamId": {
          ".validate": "newData.isNumber()",
          "$other": {
            ".validate": false
          }
        },
        "contributorTeamId": {
          ".validate": "newData.isNumber()",
          "$other": {
            ".validate": false
          }
        },
        "seatsTeamConstraints": {
          "$teamFullName": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == data.parent().child('subscriberKey').val()"
        },
        "expiryTimestamp": {
          ".validate": "newData.isNumber()",
          "$other": {
            ".validate": false
          }
        },
        "periods": {
          "$periodStart": {
            "activeUsersCount": {
              ".validate": "newData.isNumber() && newData.val() >= 0",
              "$other": {
                ".validate": false
              }
            },
            "totalUsersCount": {
              ".validate": "newData.isNumber() && newData.val() >= 0",
              "$other": {
                ".validate": false
              }
            },
            "overage": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "activeUsers": {
              "$userKey": {
                ".validate": "newData.isBoolean()",
                "$other": {
                  ".validate": false
                }
              }
            },
            ".validate": "newData.hasChildren(['activeUsersCount'])",
            "$other": {
              ".validate": false
            }
          }
        },
        "seats": {
          "$userKey": {
            ".validate": "newData.isNumber() && (now - newData.val() > -10000 && now - newData.val() < 10000 || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server')",
            "$other": {
              ".validate": false
            }
          }
        },
        ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == data.child('subscriberKey').val() || data.val() == null",
        ".validate": "newData.hasChildren(['subscriberKey', 'organization', 'coverage'])",
        "$other": {
          ".validate": false
        }
      },
      ".indexOn": [
        "organization",
        "masterSubscriptionKey"
      ]
    },
    "rules": {
      "$ownerName": {
        "$repoName": {
          "reviewCompletion": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || $ownerName != null && $repoName != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + '*').child('verdict').child('admin').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('admin').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child($ownerName).child($repoName).child('admin').val() == true))",
          ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server' || $ownerName != null && $repoName != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + '*').child('verdict').child('admin').val() == true || (auth.token.expires === null || auth.token.expires > now ? auth.uid : null) != null && (root.child('queues').child('permissions').child($ownerName + '|' + $repoName + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdict').child('admin').val() == true || root.child('queues').child('permissions').child((root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (root.child('system').child('star').val() == null ? '*' : root.child('system').child('star').val()) + '|' + (auth.token.expires === null || auth.token.expires > now ? auth.uid : null)).child('verdicts').child($ownerName).child($repoName).child('admin').val() == true))",
          "$other": {
            ".validate": false
          }
        }
      }
    },
    "memberships": {
      "$itemKey": {
        "organization": {
          ".validate": "newData.isString() && (newData.val() == null || (newData.val() == null || newData.val().contains('\\x91')) || newData.val().toLowerCase() == newData.val())",
          "$other": {
            ".validate": false
          }
        },
        "userKey": {
          ".validate": "newData.isString()",
          "$other": {
            ".validate": false
          }
        },
        "company": {
          ".validate": "newData.isString()",
          "$other": {
            ".validate": false
          }
        },
        "logoUrl": {
          ".validate": "newData.isString()",
          "$other": {
            ".validate": false
          }
        },
        "publicOnly": {
          ".validate": "newData.isBoolean()",
          "$other": {
            ".validate": false
          }
        },
        ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == data.child('userKey').val() || data.val() == null",
        ".validate": "($itemKey == null || $itemKey.contains('\\x91') || $itemKey == (newData.child('organization').val() == null ? null : newData.child('organization').val().toLowerCase() == null ? null : newData.child('organization').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + newData.child('userKey').val()) && newData.hasChildren(['organization', 'userKey', 'company'])",
        "$other": {
          ".validate": false
        }
      },
      ".indexOn": [
        "organization",
        "userKey"
      ]
    },
    "users": {
      "$userKey": {
        "timestamp": {
          ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
          ".validate": "newData.isNumber()",
          "$other": {
            ".validate": false
          }
        },
        "lastUpdateTimestamp": {
          ".validate": "newData.isNumber()",
          "$other": {
            ".validate": false
          }
        },
        "core": {
          "gitHubToken": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "gitHubTokenRevocationTimestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "email": {
            ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "billingEmail": {
            ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "public": {
            "username": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "displayName": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "avatarUrl": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            ".read": "true",
            ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
            ".validate": "newData.hasChildren(['username'])",
            "$other": {
              ".validate": false
            }
          },
          ".validate": "newData.hasChildren(['public'])",
          "$other": {
            ".validate": false
          }
        },
        "dashboardCache": {
          "organizations": {
            "$orgKey": {
              "name": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              },
              "avatarUrl": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              },
              ".validate": "newData.hasChildren(['name'])",
              "$other": {
                ".validate": false
              }
            }
          },
          "teams": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "pushableRepos": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
          "$other": {
            ".validate": false
          }
        },
        "stripe": {
          "customerId": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "trialEndTimestamps": {
            "$organization": {
              ".validate": "newData.isNumber() && ($organization == null || ($organization == null || $organization.contains('\\x91')) || $organization.toLowerCase() == $organization)",
              "$other": {
                ".validate": false
              }
            }
          },
          "card": {
            "last4": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "brand": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "expiry": {
              "month": {
                ".validate": "newData.isNumber()",
                "$other": {
                  ".validate": false
                }
              },
              "year": {
                ".validate": "newData.isNumber()",
                "$other": {
                  ".validate": false
                }
              },
              ".validate": "newData.hasChildren(['month', 'year'])",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.hasChildren(['last4', 'brand', 'expiry'])",
            "$other": {
              ".validate": false
            }
          },
          "coupon": {},
          "$other": {
            ".validate": false
          }
        },
        "enrollments": {
          "public": {
            "enrolled": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "lastEnrolledPullRequestTime": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "errorCode": {
              ".validate": "newData.val() == 'badauth' || newData.val() == 'noquota' || newData.val() == 'thirdparty'",
              "$other": {
                ".validate": false
              }
            },
            "error": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          "private": {
            "enrolled": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "lastEnrolledPullRequestTime": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "errorCode": {
              ".validate": "newData.val() == 'badauth' || newData.val() == 'noquota' || newData.val() == 'thirdparty'",
              "$other": {
                ".validate": false
              }
            },
            "error": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          "personal": {
            "enrolled": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "errorCode": {
              ".validate": "newData.val() == 'badauth'",
              "$other": {
                ".validate": false
              }
            },
            "error": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          "$other": {
            ".validate": false
          }
        },
        "index": {
          "subscriptions": {
            "$subscriptionId": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            }
          },
          "memberships": {
            "$membershipKey": {
              ".validate": "newData.val() == true",
              "$other": {
                ".validate": false
              }
            }
          },
          "extraMentions": {
            "$prKey": {
              "owner": {
                ".validate": "newData.isString() && (newData.val() == null || (newData.val() == null || newData.val().contains('\\x91')) || newData.val().toLowerCase() == newData.val())",
                "$other": {
                  ".validate": false
                }
              },
              "repo": {
                ".validate": "newData.isString() && (newData.val() == null || (newData.val() == null || newData.val().contains('\\x91')) || newData.val().toLowerCase() == newData.val())",
                "$other": {
                  ".validate": false
                }
              },
              "prNumber": {
                ".validate": "newData.isNumber()",
                "$other": {
                  ".validate": false
                }
              },
              "closedTimestamp": {
                ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
                ".validate": "newData.isNumber()",
                "$other": {
                  ".validate": false
                }
              },
              ".validate": "($prKey == null || $prKey.contains('\\x91') || $prKey == (newData.child('owner').val() == null ? null : newData.child('owner').val().toLowerCase() == null ? null : newData.child('owner').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + (newData.child('repo').val() == null ? null : newData.child('repo').val().toLowerCase() == null ? null : newData.child('repo').val().toLowerCase().replace('\\\\', '\\\\5c').replace('.', '\\\\2e').replace('$', '\\\\24').replace('#', '\\\\23').replace('[', '\\\\5b').replace(']', '\\\\5d').replace('/', '\\\\2f').replace('\\n', '\\\\0a').replace('\\r', '\\\\0d').replace('\\t', '\\\\09')) + '|' + newData.child('prNumber').val()) && newData.hasChildren(['owner', 'repo', 'prNumber'])",
              "$other": {
                ".validate": false
              }
            },
            ".indexOn": [
              "closedTimestamp"
            ]
          },
          "$other": {
            ".validate": false
          }
        },
        "notifications": {
          "$notificationKey": {
            "nextAttemptTimestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "numAttempts": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "lastSentTimestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          }
        },
        "onboarding": {
          "demoReview": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "ownReview": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "enroll": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "connect": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "sawDashboard": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "dismissed": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "sawIntro": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "visitedReviews": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "visitedRepositories": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedSupportMenu": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedAccountSettings": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "signedIn": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "signedOut": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "customizedDiffFont": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "customizedStylesheet": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "customizedLineLinkTemplate": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "customizedKeyBindings": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "toggledAnimations": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "adjustedContrast": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawGitHubAuths": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedHopdown": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawReviewTitle": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedReviewStatus": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "nextUnreviewedFile": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedChangesDropdown": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "customizedReviewCompletion": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "nextUnrepliedDiscussion": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "nextUnresolvedDiscussion": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "nextDraft": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedPublishPreview": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "published": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "publishedAsReviewer": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setSanction": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setAutoRequestReviewers": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "returnedToMainPage": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "forcedReviewIncomplete": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "updatedBranch": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawReviewStatus": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawFilesInfo": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawRevisionsInfo": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawCommitsInfo": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "undidMarkAsReviewed": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "copiedHeadBranch": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "editedBaseBranch": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "selectedReviewStyle": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedFileMatrix": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "overlappedOtherReviewers": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "openedAllFilesInNewTabs": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "usedFileMatrixHeader": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawReviewers": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "collapsedFileGroup": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "markedFileGroupReviewed": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "selectedDiscussionRevision": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedOldComments": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "linkedToLine": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawNewCommentRibbon": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawCommentAuthor": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawTimeAgoDivider": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "createdReply": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "createdDoneReply": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "createdLgtmReply": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "acknowledgedDiscussion": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "participants": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setRole": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setDefaultRole": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "dismissedParticipant": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "usedLabels": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "usedMilestone": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawEmojisSummary": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawWritingArea": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "previewedDraft": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawDraftSaved": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawMarkdown": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "uploadedFile": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "deletedDraft": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sentDraft": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "markedAllReviewed": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setProposedRevRanges": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "markedFileReviewed": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "markFileReviewedAndAdvance": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "clickedOnFilename": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "usedRevCells": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawStats": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawModes": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "navigatedToPullRequest": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawBadConnection": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawGitHubStatus": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawPriorArcs": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedFullDiff": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "toggledMergeFlavor": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "toggledBranchDisposition": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "editedMergeCommitMessage": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "mergedBranch": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "createdLineComment": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "manipulatedMargin": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawCollapsedMenu": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawCollapsedChanges": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "expandedDeclaration": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "expandedCollapsedSectionUpDown": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "revealedResolvedDiscussions": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawBaseLineMarker": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawWhitespaceLineMarker": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "forcedFileDiff": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "viewedFileOnGitHub": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "createdFileComment": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawMoreContent": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedTopDiscussion": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "createdTopDraft": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawOpenReviews": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "filteredOpenReviews": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawOpenReviewAuthorAndAssignee": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "navigatedToOpenReview": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawClosedReview": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawOpenReviewCounters": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "navigatedToPullRequestFromOpenReview": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedTeamReviews": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedPrivateReviews": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "includedStalePullRequests": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showMoreConcludedPullRequests": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "openedReviewFromGitHubUrl": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "toggledShowUnconnectedPullRequests": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "toggledShowPullRequestsFromPushableRepos": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setDefaultReviewsQuery": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawConnections": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setSeatConstraints": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedAllOrganizations": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "showedPrivateRepos": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawConnectionsOwner": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "connectedAll": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "autoConnected": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "enrolled": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "connectedRepo": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawConnector": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "openedRepoSettings": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "appliedRepositorySettings": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "canceledRepositorySettings": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "selectedAllReposForSettings": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "clearedAllReposForSettings": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "selectedRepoForSettings": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setSettingsPrototypeRepository": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setBadgePlacement": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "selectedDefaultReviewStyle": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setLgtmText": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setPermittedMergeFlavors": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setDiscussionDismissalRestriction": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "setGitHubStatusUpdates": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "editedConditionCode": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "pickedConditionExample": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "editedCompletionInfo": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "loadedCompletionInfo": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawCompletionTestResult": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "addedAllReposForCompletion": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "appliedReviewCompletionEdits": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "canceledReviewCompletionEdits": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "resetCompletionInfo": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "selectedCompletionReposToModify": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawSubscriptionDescription": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "subscribed": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "subscribedRedundantly": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "editedSubscription": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "confirmedSubscriptionEdit": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "canceledSubscriptionEdit": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "selectedFreePlan": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "selectedPaidPlan": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "selectedSubscriptionCoverage": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "constrainedContributors": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "extendedToExtraOrganizations": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "updatedPaymentCard": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "enteredPaymentCard": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "sawReceiptsMemo": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "navigatedToRepoDashboard": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          "navigatedToOrgDashboard": {
            "timestamp": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            "interval": {
              ".validate": "newData.isNumber()",
              "$other": {
                ".validate": false
              }
            },
            ".validate": "newData.isBoolean() || newData.hasChildren([     'timestamp',     'interval' ])",
            "$other": {
              ".validate": false
            }
          },
          ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
          "$other": {
            ".validate": false
          }
        },
        "settings": {
          "allowInstantSend": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "mergeFlavor": {
            ".validate": "newData.val() == 'merge' || newData.val() == 'squash' || newData.val() == 'rebase' || newData.val() == 'fastForward'",
            "$other": {
              ".validate": false
            }
          },
          "deleteBranchOnMerge": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "lastDashboardOrganization": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "defaultReviewsQuery": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "showUnconnectedPullRequests": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "showPullRequestsFromPushableRepos": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "showPullRequestsFromStarredReposOnly": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "showPullRequestsFromWatchedReposOnly": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "showPullRequestsFromConnectedReposOnly": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "overlapOtherReviewers": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "showFileMatrix": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "onboardingPromptsStartTimestamp": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "forceSingleColumn": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "margin": {
            ".validate": "newData.isNumber()",
            "$other": {
              ".validate": false
            }
          },
          "contrast": {
            ".validate": "newData.isNumber() && newData.val() >= 10 && newData.val() <= 100",
            "$other": {
              ".validate": false
            }
          },
          "defaultNewDiscussionRole": {
            ".validate": "newData.val() == 'satisfied' || newData.val() == 'discussing' || newData.val() == 'blocking' || newData.val() == 'working' || newData.val() == 'informing'",
            "$other": {
              ".validate": false
            }
          },
          "defaultNewAsAuthorDiscussionRole": {
            ".validate": "newData.val() == 'satisfied' || newData.val() == 'discussing' || newData.val() == 'blocking' || newData.val() == 'working' || newData.val() == 'informing'",
            "$other": {
              ".validate": false
            }
          },
          "defaultJoinedDiscussionRole": {
            ".validate": "newData.val() == 'satisfied' || newData.val() == 'discussing' || newData.val() == 'blocking' || newData.val() == 'working'",
            "$other": {
              ".validate": false
            }
          },
          "defaultJoinedAsAuthorDiscussionRole": {
            ".validate": "newData.val() == 'satisfied' || newData.val() == 'discussing' || newData.val() == 'blocking' || newData.val() == 'working'",
            "$other": {
              ".validate": false
            }
          },
          "defaultDoneDiscussionRole": {
            ".validate": "newData.val() == 'satisfied' || newData.val() == 'discussing' || newData.val() == 'blocking'",
            "$other": {
              ".validate": false
            }
          },
          "trustButVerify": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "autoRequestReviewers": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "imageComparisonMode": {
            ".validate": "newData.val() == 'side' || newData.val() == 'swipe' || newData.val() == 'onion' || newData.val() == 'blink'",
            "$other": {
              ".validate": false
            }
          },
          "animation": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          "syntaxStylesheetUrl": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "monospaceFont": {
            "family": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "size": {
              ".validate": "newData.isString()",
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          "lineLinkTemplate": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "keyBindingsUrl": {
            ".validate": "newData.isString()",
            "$other": {
              ".validate": false
            }
          },
          "dismissals": {
            "repoConnectionPrompt": {
              "$ownerRepo": {
                ".validate": "newData.isBoolean()",
                "$other": {
                  ".validate": false
                }
              }
            },
            "memberWelcome": {
              "$membershipKey": {
                ".validate": "newData.isBoolean()",
                "$other": {
                  ".validate": false
                }
              }
            },
            "$other": {
              ".validate": false
            }
          },
          "collapse": {
            "whitespace": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "groups": {
              "$groupName": {
                ".validate": "newData.isBoolean()",
                "$other": {
                  ".validate": false
                }
              }
            },
            "$other": {
              ".validate": false
            }
          },
          "adminHelperOptOut": {
            ".validate": "newData.isBoolean()",
            "$other": {
              ".validate": false
            }
          },
          ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
          "$other": {
            ".validate": false
          }
        },
        "state": {
          "$reviewKey": {
            "visited": {
              ".validate": "newData.val() == true",
              "$other": {
                ".validate": false
              }
            },
            "sanction": {
              ".validate": "newData.val() == 'commented' || newData.val() == 'approved' || newData.val() == 'changes_requested'",
              "$other": {
                ".validate": false
              }
            },
            "autoRequestReviewers": {
              ".validate": "newData.isBoolean()",
              "$other": {
                ".validate": false
              }
            },
            "drafts": {
              "$draftKey": {
                "revisionKey": {
                  ".validate": "newData.isString() && root.child('reviews').child($reviewKey).child('revisions').hasChild(newData.val())",
                  "$other": {
                    ".validate": false
                  }
                },
                "revisionBase": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "otherRevisionKey": {
                  ".validate": "newData.isString() && root.child('reviews').child($reviewKey).child('revisions').hasChild(newData.val())",
                  "$other": {
                    ".validate": false
                  }
                },
                "otherRevisionBase": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "fileKey": {
                  ".validate": "newData.isString() && root.child('reviews').child($reviewKey).child('files').hasChild(newData.val())",
                  "$other": {
                    ".validate": false
                  }
                },
                "line": {
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                "commentKey": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "creationTimestamp": {
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                "timestamp": {
                  ".validate": "newData.isNumber()",
                  "$other": {
                    ".validate": false
                  }
                },
                "markdownBody": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "bodyHash": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "htmlBody": {
                  ".validate": "newData.isString()",
                  "$other": {
                    ".validate": false
                  }
                },
                "htmlBodies": {
                  "$hashKey": {
                    ".validate": "newData.isString()",
                    "$other": {
                      ".validate": false
                    }
                  }
                },
                "role": {
                  ".validate": "newData.val() == 'satisfied' || newData.val() == 'discussing' || newData.val() == 'blocking' || newData.val() == 'working' || newData.val() == 'informing' || newData.val() == 'following' || newData.val() == 'withdrawn'",
                  "$other": {
                    ".validate": false
                  }
                },
                "roleSetManually": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "intent": {
                  ".validate": "newData.val() == 'fyi' || newData.val() == 'ok'",
                  "$other": {
                    ".validate": false
                  }
                },
                "postingAttempted": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                ".validate": "newData.hasChildren(['commentKey', 'timestamp', 'role'])",
                "$other": {
                  ".validate": false
                }
              }
            },
            "trash": {
              "$locationKey": {
                "$draftKey": {
                  "revisionKey": {
                    ".validate": "newData.isString() && root.child('reviews').child($reviewKey).child('revisions').hasChild(newData.val())",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "revisionBase": {
                    ".validate": "newData.isBoolean()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "otherRevisionKey": {
                    ".validate": "newData.isString() && root.child('reviews').child($reviewKey).child('revisions').hasChild(newData.val())",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "otherRevisionBase": {
                    ".validate": "newData.isBoolean()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "fileKey": {
                    ".validate": "newData.isString() && root.child('reviews').child($reviewKey).child('files').hasChild(newData.val())",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "line": {
                    ".validate": "newData.isNumber()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "commentKey": {
                    ".validate": "newData.isString()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "creationTimestamp": {
                    ".validate": "newData.isNumber()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "timestamp": {
                    ".validate": "newData.isNumber()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "markdownBody": {
                    ".validate": "newData.isString()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "bodyHash": {
                    ".validate": "newData.isString()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "htmlBody": {
                    ".validate": "newData.isString()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "htmlBodies": {
                    "$hashKey": {
                      ".validate": "newData.isString()",
                      "$other": {
                        ".validate": false
                      }
                    }
                  },
                  "role": {
                    ".validate": "newData.val() == 'satisfied' || newData.val() == 'discussing' || newData.val() == 'blocking' || newData.val() == 'working' || newData.val() == 'informing' || newData.val() == 'following' || newData.val() == 'withdrawn'",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "roleSetManually": {
                    ".validate": "newData.isBoolean()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "intent": {
                    ".validate": "newData.val() == 'fyi' || newData.val() == 'ok'",
                    "$other": {
                      ".validate": false
                    }
                  },
                  "postingAttempted": {
                    ".validate": "newData.isBoolean()",
                    "$other": {
                      ".validate": false
                    }
                  },
                  ".validate": "newData.hasChildren(['commentKey', 'timestamp', 'role'])",
                  "$other": {
                    ".validate": false
                  }
                }
              }
            },
            "roleChanges": {
              "$discussionKey": {
                ".validate": "root.child('reviews').child($reviewKey).child('tracker').hasChild($discussionKey) && (newData.val() == 'satisfied' || newData.val() == 'discussing' || newData.val() == 'blocking' || newData.val() == 'working' || newData.val() == 'following')",
                "$other": {
                  ".validate": false
                }
              }
            },
            "acknowledgements": {
              "$discussionKey": {
                ".validate": "root.child('reviews').child($reviewKey).child('tracker').hasChild($discussionKey) && newData.isNumber()",
                "$other": {
                  ".validate": false
                }
              }
            },
            "dismissals": {
              "$dismissalKey": {
                "discussionKey": {
                  ".validate": "root.child('reviews').child($reviewKey).child('tracker').hasChild(newData.val())",
                  "$other": {
                    ".validate": false
                  }
                },
                "targetUserKey": {
                  ".validate": "root.child('reviews').child($reviewKey).child('tracker').child(newData.parent().child('discussionKey').val()).child('participants').hasChild(newData.val())",
                  "$other": {
                    ".validate": false
                  }
                },
                ".validate": "($dismissalKey == newData.child('discussionKey').val() + '|' + newData.child('targetUserKey').val()) && newData.hasChildren(['discussionKey', 'targetUserKey'])",
                "$other": {
                  ".validate": false
                }
              }
            },
            "marks": {
              "$fileKey": {
                "revisions": {
                  "$revisionKey": {
                    "reviewed": {
                      ".validate": "newData.val() == true",
                      "$other": {
                        ".validate": false
                      }
                    },
                    ".validate": "(root.child('reviews').child($reviewKey).child('revisions').hasChild($revisionKey)) && newData.hasChildren(['reviewed'])",
                    "$other": {
                      ".validate": false
                    }
                  }
                },
                ".validate": "root.child('reviews').child($reviewKey).child('files').hasChild($fileKey)",
                "$other": {
                  ".validate": false
                }
              }
            },
            "settings": {
              "overlapOtherReviewers": {
                ".validate": "newData.isBoolean()",
                "$other": {
                  ".validate": false
                }
              },
              "collapse": {
                "whitespace": {
                  ".validate": "newData.isBoolean()",
                  "$other": {
                    ".validate": false
                  }
                },
                "groups": {
                  "$groupName": {
                    ".validate": "newData.isBoolean()",
                    "$other": {
                      ".validate": false
                    }
                  }
                },
                "$other": {
                  ".validate": false
                }
              },
              "mergeFlavor": {
                ".validate": "newData.val() == 'merge' || newData.val() == 'squash' || newData.val() == 'rebase' || newData.val() == 'fastForward'",
                "$other": {
                  ".validate": false
                }
              },
              "deleteBranchOnMerge": {
                ".validate": "newData.isBoolean()",
                "$other": {
                  ".validate": false
                }
              },
              "mergeCommitMessage": {
                ".validate": "newData.isString()",
                "$other": {
                  ".validate": false
                }
              },
              "$other": {
                ".validate": false
              }
            },
            "$other": {
              ".validate": false
            }
          },
          ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey"
        },
        ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == $userKey",
        "$other": {
          ".validate": false
        }
      }
    },
    ".read": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server'",
    ".write": "(auth.token.expires === null || auth.token.expires > now ? auth.uid : null) == 'server'",
    "$other": {
      ".validate": false
    }
  }
}
