name: Build server
on:
  pull_request:
    ignore-branches:
      - release
  push:
    branches:
      - release
env:
  SLACK_URL: ${{ secrets.SLACK_URL }}
  GITTER_URL: ${{ secrets.GITTER_URL }}
  SENTRY_API_KEY: ${{ secrets.SENTRY_API_KEY }}
  FIREBASE_DEPLOY_TOKEN: ${{ secrets.FIREBASE_DEPLOY_TOKEN }}
  LAST_SHIPPABLE_RUN: 4638
  BRANCH: ${{ github.ref }}
  GITHUB_TOKEN: ${{ github.token }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_URL }}
  BUILD_NUMBER: ${{ github.run_number }}
  REVIEWABLE_FIREBASE: reviewable
  REVIEWABLE_FIREBASE_WEB_API_KEY: AIzaSyDv2EitKktEvCxDdBzDvepaFcsublGUGRI
  REVIEWABLE_FIREBASE_PROJECT_ID: firebase-reviewable
  REVIEWABLE_HOST_URL: https://reviewable.io
  REVIEWABLE_GITHUB_URL: https://github.com
  REVIEWABLE_GITHUB_CLIENT_ID: 7da38b6fb966259af6d5
  REVIEWABLE_MIXPANEL_TOKEN: 47d8b419a2152fa04c255781d51c209e
  REVIEWABLE_HEADWAY_ACCOUNT: qJAvVy
  REVIEWABLE_STRIPE_PUBLISHABLE_KEY: pk_live_ih0FgRCAkYNrayIOV2vitb60
  REVIEWABLE_TERMS_URL: https://github.com/Reviewable/Reviewable/blob/master/legal/terms.md
  REVIEWABLE_PRIVACY_URL: https://github.com/Reviewable/Reviewable/blob/master/legal/privacy.md
  REVIEWABLE_CLIENT_SENTRY_DSN: https://1a7d50a470574294937db62e304cabbb@sentry.io/124660
  SENTRY_ORG: reviewableio
  SENTRY_PROJECT_ID: testing
  SENTRY_PROJECT: reviewableio/testing
defaults:
  run:
    shell: bash
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      ####################################
      ##           on build             ##
      ####################################

      # IMPORANT: USE DOUBLEQUOTES (") WITHIN RUN BLOCKS

      # Bug in `act` tool causes git refs to assign with \\ as separators in windows environments
      # Bug: single quotes do not get intepreted correctly in if statements
      - name: Assign SHOULD_RELEASE
        run: |
          if [[ ${{ github.event_name }} != "pull_request" &&
            ($GITHUB_REF == "\\refs\\heads\\release" ||
            $GITHUB_REF == "refs/heads/release") ]]; then
            SHOULD_RELEASE=true;
          else
            SHOULD_RELEASE=false;
          fi
          echo $SHOULD_RELEASE
          echo "SHOULD_RELEASE=$SHOULD_RELEASE" >> $GITHUB_ENV

      - name: Assign BUILD_GROUP_NUMBER
        id: build_group_number
        run: |
          BUILD_GROUP_NUMBER=$(echo $(expr $BUILD_NUMBER + $LAST_SHIPPABLE_RUN) | sed 's/\..*//')
          echo "BUILD_GROUP_NUMBER=$BUILD_GROUP_NUMBER" >> $GITHUB_ENV
      - name: Assign PULL_REQUEST
        id: setpullrequest
        run: |
          PULL_REQUEST=$(cat $GITHUB_EVENT_PATH | jq -r ".pull_request.number")
          if [[ "$PULL_REQUEST" = "null" ]]; then PULL_REQUEST="false"; fi
          echo "PULL_REQUEST=$PULL_REQUEST" >> $GITHUB_ENV

      # REMOVE ME: when debugging is completed
      - name: Print info
        shell: bash
        run: |
          echo "Branch: $BRANCH; pull request: $PULL_REQUEST; build: $BUILD_GROUP_NUMBER"

      - uses: actions/checkout@v2
        with:
          token: ${{ env.GITHUB_TOKEN }}
      - uses: actions/cache@v2
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - run: npm i -g yarn grunt-cli bower
      - name: Install root package dependencies
        run: yarn install --pure-lockfile
      - name: Install root bower dependencies
        run: bower install --allow-root --force-latest
      - name: Install diff_worker bower dependencies
        run: |
          cd diff_worker
          bower install --allow-root --force-latest
          cd ..
      - name: Install truss_worker bower dependencies
        run: |
          cd truss_worker
          bower install --allow-root --force-latest
          cd ..
      - name: Build
        run: NODE_ENV=production grunt dist

      ####################################
      ##          on release            ##
      ####################################
      - name: Release version
        if: env.SHOULD_RELEASE == 'true'
        run: |
          if [[ $BRANCH =~ .*release$ ]]; then
            BUILD_TARGET='production'
            # FIREBASE_PROJECT='firebase-reviewable'

            # for Debugging
            FIREBASE_PROJECT='reviewable-dev-anthony-fd713'
          elif [[ $BRANCH =~ .*release-beta$ ]]; then
            BUILD_TARGET='beta'
            # FIREBASE_PROJECT='reviewable-beta'

            # for Debugging
            FIREBASE_PROJECT='reviewable-dev-anthony-fd713'
          else
            echo "Unrecognized release branch: $BRANCH"
            exit 1
          fi
          echo "BUILD_TARGET=$BUILD_TARGET" >> $GITHUB_ENV
          echo "FIREBASE_PROJECT=$FIREBASE_PROJECT" >> $GITHUB_ENV

      - name: Assign BUILD_URL
        if: env.SHOULD_RELEASE == 'true'
        run: |
          echo "BUILD_URL=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV

      - name: Sentry release
        if: env.SHOULD_RELEASE == 'true'
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_PROJECT: ${{ env.SENTRY_PROJECT_ID }}
        with:
          sourcemaps: 'dist/static/js'
          environment: 'production'
          version: ${{ env.BUILD_GROUP_NUMBER }}
          set_commits: skip

      - name: Tagging release version
        if: env.SHOULD_RELEASE == 'true'
        uses: mathieudutour/github-tag-action@v5.2
        with:
          custom_tag: ${{ env.BUILD_GROUP_NUMBER }}
          tag_prefix: "build-"
          github_token: ${{ env.GITHUB_TOKEN }}

      - name: Instal Firebase Tools
        if: env.SHOULD_RELEASE == 'true'
        run:  curl -sL https://firebase.tools | bash

      - name: Deploy to Firebase
        if: env.SHOULD_RELEASE == 'true'
        run: |
          echo "Deploying client to $BUILD_TARGET..."
          firebase deploy --non-interactive --token "$FIREBASE_DEPLOY_TOKEN" --project "$FIREBASE_PROJECT" --public build --only hosting,database --message "Build $BUILD_GROUP_NUMBER"

      - name: Assign NOTIFICATION
        id: notify_on_success
        if: env.SHOULD_RELEASE == 'true'
        run: |
          NOTIFICATION=$(echo "{\"level\": \"info\", \"message\": \"Client [build $BUILD_GROUP_NUMBER]($BUILD_URL) deployed\", \"html\": \"Client <a href=\\\"$BUILD_URL\\\">build $BUILD_GROUP_NUMBER</a> deployed\"}")
          echo "::set-output name=NOTIFICATION::$NOTIFICATION"

      - name: Assign NOTIFICATION on failure
        id: notify_on_failure
        if: env.SHOULD_RELEASE == 'true' && failure()
        run: |
          NOTIFICATION=$(echo "{\"level\": \"error\", \"message\": \"Client [build $BUILD_GROUP_NUMBER]($BUILD_URL) deployment failed\", \"html\": \"Client <a href=\\\"$BUILD_URL\\\">build $BUILD_GROUP_NUMBER</a> deployment failed\"}")
          echo "::set-output name=NOTIFICATION::$NOTIFICATION"

      - run: echo $NOTIFICATION

      - name: Shortwave Notification
        if: always() && env.SHOULD_RELEASE == 'true'
        uses: fjogeleit/http-request-action@master
        with:
          url: ${{ secrets.SHORTWAVE_NOTIFICATIONS_URL }}
          method: 'POST'
          data: ${{ steps.notify_on_failure.outputs.NOTIFICATION || steps.notify_on_success.outputs.NOTIFICATION  }}
          timeout: 15000

      - name: Gitter Notification
        if: always() && env.SHOULD_RELEASE == 'true'
        uses: fjogeleit/http-request-action@master
        with:
          url: ${{ secrets.GITTER_URL }}
          method: 'POST'
          data: ${{ steps.notify_on_failure.NOTIFICATION || steps.notify_on_success.NOTIFICATION  }}
          timeout: 15000

      ####################################
      ##          on failure            ##
      ####################################
      - name: Delete release on failure
        if: env.SHOULD_RELEASE == 'true' && failure()
        uses: dev-drprasad/delete-tag-and-release@v0.1.3
        with:
          delete_release: true
          tag_name: "build-${{ env.BUILD_GROUP_NUMBER }}" # tag name to delete
