name: Build server
on: [push, pull_request]
env:
  SLACK_URL: ${{ secrets.SLACK_URL }} #secret
  GITTER_URL: ${{ secrets.GITTER_URL }} # secret
  SENTRY_API_KEY: ${{ secrets.SENTRY_API_KEY }} # secret
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }} # secret
  REVIEWABLE_SMTP_URL: ${{ secrets.REVIEWABLE_SMTP_URL }} # secret
  REVIEWABLE_PING_URL: ${{ secrets.REVIEWABLE_PING_URL }} # secret
  REVIEWABLE_LOGGLY_TOKEN: ${{ secrets.REVIEWABLE_LOGGLY_TOKEN }} # secret
  REVIEWABLE_FIREBASE_AUTH: ${{ secrets.REVIEWABLE_FIREBASE_AUTH }} # secret
  REVIEWABLE_STRIPE_SECRET_KEY: ${{ secrets.REVIEWABLE_STRIPE_SECRET_KEY }} # secret
  REVIEWABLE_SERVER_SENTRY_DSN: ${{ secrets.REVIEWABLE_SERVER_SENTRY_DSN }} # secret
  REVIEWABLE_GITHUB_SECRET_TOKEN: ${{ secrets.REVIEWABLE_GITHUB_SECRET_TOKEN }} # secret
  REVIEWABLE_FIREBASE_PRIVATE_KEY: ${{ secrets.REVIEWABLE_FIREBASE_PRIVATE_KEY }} # secret
  REVIEWABLE_GITHUB_CLIENT_SECRET: ${{ secrets.REVIEWABLE_GITHUB_CLIENT_SECRET }} # secret
  REVIEWABLE_ENCRYPTION_PRIVATE_KEYS: ${{ secrets.REVIEWABLE_ENCRYPTION_PRIVATE_KEYS }} # secret
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # secret
  SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.SERVICE_ACCOUNT_PRIVATE_KEY }} # secret
  LAST_SHIPPABLE_RUN: 2771
  BRANCH: ${{ github.ref }}
  GITHUB_TOKEN: ${{ github.token }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_URL }}
  BUILD_NUMBER: ${{ github.run_number }}
  REVIEWABLE_HOST_URL: https://reviewable.io
  REVIEWABLE_FIREBASE_CREDENTIALS_FILE: service_account_key.json
  SENTRY_ORG: reviewableio
  SENTRY_PROJECT_ID: testing
  SENTRY_PROJECT: reviewableio/reviewableio-server
jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Assign BUILD_GROUP_NUMBER
        id: build_group_number
        run: |
          BUILD_GROUP_NUMBER=$(echo $(expr $BUILD_NUMBER + $LAST_SHIPPABLE_RUN) | sed 's/\..*//')
          echo "BUILD_GROUP_NUMBER=$BUILD_GROUP_NUMBER" >> $GITHUB_ENV
      - name: Assign PULL_REQUEST
        id: setpullrequest
        run: |
          PULL_REQUEST=$(cat $GITHUB_EVENT_PATH | jq -r ".pull_request.number")
          if [[ "$PULL_REQUEST" = "null" ]]; then PULL_REQUEST="false"; fi
          echo "PULL_REQUEST=$PULL_REQUEST" >> $GITHUB_ENV
      - name: Print info
        shell: bash
        run: |
          echo "Branch: $BRANCH; pull request: $PULL_REQUEST; build: $BUILD_GROUP_NUMBER"
        env:
          BRANCH: ${{ github.ref }}

      - uses: actions/checkout@v2
        with:
          token: ${{ env.GITHUB_TOKEN }}
      - uses: actions/cache@v2
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      - name: Install
        run: npx yarn install --pure-lockfile
      - name: Build
        run: npm run build
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm run test

  release:
    if: |
      github.event_name != 'pull_request' &&
      (contains(github.ref, '\\refs\\heads\\release') ||
      contains(github.ref, 'refs/heads/release'))
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: Assign BUILD_GROUP_NUMBER
        id: buildgroupnumber
        shell: bash
        run: |
          BUILD_GROUP_NUMBER=$(echo $(expr $BUILD_NUMBER + $LAST_SHIPPABLE_RUN) | sed 's/\..*//')
          echo "BUILD_GROUP_NUMBER=$BUILD_GROUP_NUMBER" >> $GITHUB_ENV
      - uses: actions/checkout@v2
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Assign BUILD_URL
        shell: bash
        run: |
          echo "BUILD_URL=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV

      - name: Assign NOTIFICATION
        shell: bash
        run: |
          NOTIFICATION=`echo "{\"level\": \"info\", \"message\": \"Server [build $BUILD_GROUP_NUMBER]($BUILD_URL) deployed\", \"text\": \"Server <$BUILD_URL|build $BUILD_GROUP_NUMBER> deployed\"}"`
          echo "NOTIFICATION=$NOTIFICATION" >> $GITHUB_ENV

      - name: Cloud Configuration
        id: configurecloud
        shell: bash
        run: |
          json=$(sed "s|SERVICE_ACCOUNT_PRIVATE_KEY|$(echo $SERVICE_ACCOUNT_PRIVATE_KEY | sed -e 's/\\/\\\\/g')|" service_account_key.json)
          # python command is to minify contents contents of service_account_key.json
          content=$(echo $json | python3 -c 'import json, sys;json.dump(json.load(sys.stdin), sys.stdout)')
          echo "::set-output name=GCP_SA_KEY::$content"
          
      - name: Setup cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}    
          service_account_key: ${{ steps.configurecloud.outputs.GCP_SA_KEY }}  
          export_default_credentials: true
      - name: Gcloud Info
        run: gcloud info

      - name: Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_PROJECT: ${{ env.SENTRY_PROJECT_ID }}
        with:
          sourcemaps: './build/lib ./build' 
          environment: 'production'
          version: ${{ env.BUILD_GROUP_NUMBER }}
          set_commits: skip

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          body: "Build ${{ env.BUILD_GROUP_NUMBER }}"
          tag: "build-${{ env.BUILD_GROUP_NUMBER }}"
          token: ${{ env.GITHUB_TOKEN }}

      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install and Build
        run: |
          npx yarn install --pure-lockfile
          npm run build
      
      - name: Update app.yaml
        shell: bash
        run: |
          sudo apt-get update -qq && sudo apt-get install python3-distutils -qq
          echo "Deploying server..."
          echo "  REVIEWABLE_FIREBASE_AUTH: $REVIEWABLE_FIREBASE_AUTH" >>app.yaml
          echo "  REVIEWABLE_FIREBASE_PRIVATE_KEY: $REVIEWABLE_FIREBASE_PRIVATE_KEY" >>app.yaml
          echo "  REVIEWABLE_ENCRYPTION_PRIVATE_KEYS: $REVIEWABLE_ENCRYPTION_PRIVATE_KEYS" >>app.yaml
          echo "  REVIEWABLE_FIREBASE_CREDENTIALS_FILE: $REVIEWABLE_FIREBASE_CREDENTIALS_FILE" >>app.yaml
          echo "  REVIEWABLE_SMTP_URL: $REVIEWABLE_SMTP_URL" >>app.yaml
          echo "  REVIEWABLE_SERVER_SENTRY_DSN: $REVIEWABLE_SERVER_SENTRY_DSN" >>app.yaml
          echo "  REVIEWABLE_PING_URL: $REVIEWABLE_PING_URL" >>app.yaml
          echo "  REVIEWABLE_STRIPE_SECRET_KEY: $REVIEWABLE_STRIPE_SECRET_KEY" >>app.yaml
          echo "  REVIEWABLE_LOGGLY_TOKEN: $REVIEWABLE_LOGGLY_TOKEN" >>app.yaml
          echo "  REVIEWABLE_GITHUB_CLIENT_SECRET: $REVIEWABLE_GITHUB_CLIENT_SECRET" >>app.yaml
          echo "  REVIEWABLE_GITHUB_SECRET_TOKEN: $REVIEWABLE_GITHUB_SECRET_TOKEN" >>app.yaml
          echo "  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY" >>app.yaml
          echo "  REVIEWABLE_VERSION: $BUILD_GROUP_NUMBER" >>app.yaml
      
      - name: Deploy
        uses: google-github-actions/deploy-appengine@main
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          deliverables: app.yaml
          version: ${{ env.BUILD_GROUP_NUMBER }}
      - name: Deleting obsolete versions
        shell: bash
        run: |
          echo "App deployed, looking for obsolete versions to delete..."
          # Keep the previous version around for rollbacks
          limit=$(gcloud app versions list --filter='traffic_split=0' --format='value(id)' | wc -l)
          echo "Found $limit older versions"
          let "limit-=5" || true
          echo "Need to delete $limit of them"
          if [ $limit -gt 0 ]; then
            versions=$(gcloud app versions list --filter='traffic_split=0' --format='value(id)' --sort-by='last_deployed_time' --limit $limit)
            if [ ! -z "$versions" ]; then
              echo "Deleting obsolete versions: $versions"
              until gcloud app versions delete $versions --quiet
              do
                sleep 10  # Give the old version(s) a bit of time to drop their traffic, so we can delete them.
              done
            fi
          fi
      
      - name: Slack - Success
        uses: Ilshidur/action-slack@2.0.2
        env:
          SLACK_CUSTOM_PAYLOAD: ${{ env.NOTIFICATION }}

      - name: Gitter notify
        uses: fjogeleit/http-request-action@master
        with:
          url: ${{ secrets.GITTER_URL }}
          method: 'POST'
          data: ${{ env.NOTIFICATION }}
          timeout: 15000

  on_failure:
    if: failure()
    runs-on: ubuntu-latest
    needs: [CI, release]
    steps:
      - uses: actions/checkout@v2
      - name: Cloud Configuration
        id: configurecloud
        shell: bash
        run: |
          json=$(sed "s|SERVICE_ACCOUNT_PRIVATE_KEY|$(echo $SERVICE_ACCOUNT_PRIVATE_KEY | sed -e 's/\\/\\\\/g')|" service_account_key.json)
          # python command is to minify contents contents of service_account_key.json
          content=$(echo $json | python3 -c 'import json, sys;json.dump(json.load(sys.stdin), sys.stdout)')
          echo "::set-output name=GCP_SA_KEY::$content"

      - name: Setup cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}    
          service_account_key: ${{ steps.configurecloud.outputs.GCP_SA_KEY }}  
          export_default_credentials: true

      - name: Assign BUILD_GROUP_NUMBER
        id: buildgroupnumber
        shell: bash
        run: |
          BUILD_GROUP_NUMBER=$(echo $(expr $BUILD_NUMBER + $LAST_SHIPPABLE_RUN) | sed 's/\..*//')
          echo "BUILD_GROUP_NUMBER=$BUILD_GROUP_NUMBER" >> $GITHUB_ENV

      - name: Assign BUILD_URL
        shell: bash
        run: |
          echo "BUILD_URL=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV

      - name: Assign NOTIFICATION
        shell: bash
        run: |
          NOTIFICATION=`echo "{\"level\": \"error\", \"message\": \"Server [build $BUILD_GROUP_NUMBER]($BUILD_URL) deployment failed\", \"text\": \"Server <$BUILD_URL|build $BUILD_GROUP_NUMBER> deployment failed\"}"`
          echo "NOTIFICATION=$NOTIFICATION" >> $GITHUB_ENV

      - name: Delete release on failure
        uses: dev-drprasad/delete-tag-and-release@v0.1.3
        if: |
          github.event_name != 'pull_request' &&
          (contains(github.ref, '\\refs\\heads\\release') ||
          contains(github.ref, 'refs/heads/release'))
        with:
          delete_release: true
          tag_name: "build-${{ env.BUILD_GROUP_NUMBER }}" # tag name to delete
      - name: Slack - Error
        if: |
          github.event_name != 'pull_request' &&
          (contains(github.ref, '\\refs\\heads\\release') ||
          contains(github.ref, 'refs/heads/release'))
        uses: Ilshidur/action-slack@2.0.2
        env:
          SLACK_CUSTOM_PAYLOAD: '{{ NOTIFICATION }}'

      - name: Gitter notify
        uses: fjogeleit/http-request-action@master
        with:
          url: ${{ secrets.GITTER_URL }}
          data: ${{ env.NOTIFICATION }}
          method: 'POST'
        



        
