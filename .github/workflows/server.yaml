name: Build server
on: [push, pull_request]
env:
  BRANCH: ${{ github.ref }}
  BUILD_NUMBER: ${{ github.run_number }}
  GITHUB_TOKEN: ${{ github.token }}
  REVIEWABLE_HOST_URL: ${{ secrets.REVIEWABLE_HOST_URL }}
  REVIEWABLE_FIREBASE: ${{ secrets.REVIEWABLE_FIREBASE }}
  REVIEWABLE_FIREBASE_PROJECT_ID: ${{ secrets.REVIEWABLE_FIREBASE_PROJECT_ID }}
  REVIEWABLE_FIREBASE_WEB_API_KEY: AIzaSyArk9DViC8pswhT_f4afh8ot203TvB46EE
  REVIEWABLE_FIREBASE_AUTH: ${{ secrets.REVIEWABLE_FIREBASE_AUTH }}
  REVIEWABLE_CODE_EXECUTOR: ${{ secrets.REVIEWABLE_CODE_EXECUTOR }}
  REVIEWABLE_GITHUB_CLIENT_ID: ${{ secrets.REVIEWABLE_GITHUB_CLIENT_ID }}
  REVIEWABLE_LOGGLY_SUBDOMAIN: ${{ secrets.REVIEWABLE_LOGGLY_SUBDOMAIN }}
  REVIEWABLE_MIXPANEL_TOKEN: ${{ secrets.REVIEWABLE_MIXPANEL_TOKEN }}
  REVIEWABLE_SMTP_FROM: ${{ secrets.REVIEWABLE_SMTP_FROM }}
  REVIEWABLE_SMTP_BCC: ${{ secrets.REVIEWABLE_SMTP_FROM }}
  SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.SERVICE_ACCOUNT_PRIVATE_KEY }}
  CLOUD_PROJECT: ${{ secrets.CLOUD_PROJECT }}
  LAST_SHIPPABLE_RUN: ${{ secrets.LAST_SHIPPABLE_RUN }}
  SLACK_URL: ${{ secrets.SLACK_URL }}
  GITTER_URL: ${{ secrets.GITTER_URL }}
jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Assign BUILD_GROUP_NUMBER
        id: build_group_number
        run: |
          BUILD_GROUP_NUMBER=$(echo $(expr $BUILD_NUMBER + $LAST_SHIPPABLE_RUN) | sed 's/\..*//')
          echo "::set-output name=BUILD_GROUP_NUMBER::$BUILD_GROUP_NUMBER"
      - name: Assign PULL_REQUEST
        id: setpullrequest
        run: |
          PULL_REQUEST=$(cat $GITHUB_EVENT_PATH | jq -r ".pull_request.number")
          if [[ "$PULL_REQUEST" = "null" ]]; then PULL_REQUEST="false"; fi
          export PULL_REQUEST=$PULL_REQUEST
          echo "::set-output name=PULL_REQUEST::$PULL_REQUEST"
      - name: Print info
        run: |
          echo "Branch: ${{ env.BRANCH }}; pull request: ${{ steps.setpullrequest.outputs.PULL_REQUEST }}; build: ${{ steps.build_group_number.outputs.BUILD_GROUP_NUMBER }}"

      - uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
      - uses: actions/cache@v2
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      - name: Install
        run: npx yarn install --pure-lockfile
      - name: Build
        run: npm run build
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm run test

    outputs:
      PULL_REQUEST: ${{ steps.setpullrequest.outputs.PULL_REQUEST }}

  release:
    if: |
      github.event_name != 'pull_request' &&
      (contains(github.ref, '\\refs\\heads\\release') ||
      contains(github.ref, 'refs/heads/release'))
    needs: CI
    runs-on: ubuntu-latest
    env:
      BUILD_URL: ${{ secrets.BUILD_URL }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_URL }}
    steps:
      - name: Assign BUILD_GROUP_NUMBER
        id: buildgroupnumber
        run: |
          BUILD_GROUP_NUMBER=$(echo $(expr $BUILD_NUMBER + $LAST_SHIPPABLE_RUN) | sed 's/\..*//')
          echo "::set-output name=BUILD_GROUP_NUMBER::$BUILD_GROUP_NUMBER"
      - shell: bash
        run: |
          mkdir shippable
          echo "{\"level\": \"error\", \"message\": \"Server [build $BUILD_GROUP_NUMBER]($BUILD_URL) deployment failed\", \"text\": \"Server <$BUILD_URL|build $BUILD_GROUP_NUMBER> deployment failed\"}" >shippable/notification.json
          cat shippable/notification.json
        env:
          BUILD_GROUP_NUMBER: ${{ steps.buildgroupnumber.outputs.BUILD_GROUP_NUMBER }}
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: bash -e ./scripts/cleanup.sh
      - name: Cloud Configuration
        id: configurecloud
        run: |
          content=`cat service_account_key.json | base64 | tr -d '\n'`
          echo "::set-output name=GCP_SA_KEY::$content"

      - name: Setup cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}    
          service_account_key: ${{ steps.configurecloud.outputs.GCP_SA_KEY }}  
          export_default_credentials: true
      - name: Gcloud Info
        run: gcloud info

      - name: Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_API_KEY }}
          BUILD_GROUP_NUMBER: ${{ steps.buildgroupnumber.outputs.BUILD_GROUP_NUMBER }}
        with:
          sourcemaps: './build/lib ./build' 
          environment: 'production'
          version: ${{ env.BUILD_GROUP_NUMBER }}
          set_commits: skip

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          body: "Build ${{ env.BUILD_GROUP_NUMBER }}"
          tag: "build-${{ env.BUILD_GROUP_NUMBER }}"
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          BUILD_GROUP_NUMBER: ${{ steps.buildgroupnumber.outputs.BUILD_GROUP_NUMBER }}

      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install and Build
        run: |
          npx yarn install --pure-lockfile
          npm run build
      
      - name: Update app.yaml
        shell: bash
        run: |
          sudo apt-get update -qq && sudo apt-get install python3-distutils -qq
          echo "Deploying server..."
          echo "  REVIEWABLE_FIREBASE_AUTH: $REVIEWABLE_FIREBASE_AUTH" >>app.yaml
          echo "  REVIEWABLE_FIREBASE_PRIVATE_KEY: $REVIEWABLE_FIREBASE_PRIVATE_KEY" >>app.yaml
          echo "  REVIEWABLE_ENCRYPTION_PRIVATE_KEYS: $REVIEWABLE_ENCRYPTION_PRIVATE_KEYS" >>app.yaml
          echo "  REVIEWABLE_SMTP_URL: $REVIEWABLE_SMTP_URL" >>app.yaml
          echo "  REVIEWABLE_SERVER_SENTRY_DSN: $REVIEWABLE_SERVER_SENTRY_DSN" >>app.yaml
          echo "  REVIEWABLE_PING_URL: $REVIEWABLE_PING_URL" >>app.yaml
          echo "  REVIEWABLE_STRIPE_SECRET_KEY: $REVIEWABLE_STRIPE_SECRET_KEY" >>app.yaml
          echo "  REVIEWABLE_LOGGLY_TOKEN: $REVIEWABLE_LOGGLY_TOKEN" >>app.yaml
          echo "  REVIEWABLE_GITHUB_CLIENT_SECRET: $REVIEWABLE_GITHUB_CLIENT_SECRET" >>app.yaml
          echo "  REVIEWABLE_GITHUB_SECRET_TOKEN: $REVIEWABLE_GITHUB_SECRET_TOKEN" >>app.yaml
          echo "  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY" >>app.yaml
          echo "  REVIEWABLE_VERSION: $BUILD_GROUP_NUMBER" >>app.yaml
          rm ~/.config/gcloud/logs/*/*.log
        env:
          BUILD_GROUP_NUMBER: ${{ steps.buildgroupnumber.outputs.BUILD_GROUP_NUMBER }}
      
      - name: Deploy
        uses: google-github-actions/deploy-appengine@main
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          deliverables: app.yaml
          version: ${{ steps.buildgroupnumber.outputs.BUILD_GROUP_NUMBER }}
      - name: Deleting obsolete versions
        run: |
          echo "App deployed, looking for obsolete versions to delete..."
          # Keep the previous version around for rollbacks
          limit=$(gcloud app versions list --filter='traffic_split=0' --format='value(id)' | wc -l)
          echo "Found $limit older versions"
          let "limit-=5" || true
          echo "Need to delete $limit of them"
          if [ $limit -gt 0 ]; then
            versions=$(gcloud app versions list --filter='traffic_split=0' --format='value(id)' --sort-by='last_deployed_time' --limit $limit)
            if [ ! -z "$versions" ]; then
              echo "Deleting obsolete versions: $versions"
              until gcloud app versions delete $versions --quiet
              do
                sleep 10  # Give the old version(s) a bit of time to drop their traffic, so we can delete them.
              done
            fi
          fi
      - shell: bash
        run: 'echo "{\"level\": \"info\", \"message\": \"Server [build $BUILD_GROUP_NUMBER]($BUILD_URL) deployed\", \"text\": \"Server <$BUILD_URL|build $BUILD_GROUP_NUMBER> deployed\"}" >shippable/notification.json'
        env:
          BUILD_GROUP_NUMBER: ${{ steps.buildgroupnumber.outputs.BUILD_GROUP_NUMBER }}
      - name: Delete release on failure
        if: failure()
        uses: dev-drprasad/delete-tag-and-release@v0.1.3
        with:
          delete_release: true
          tag_name: "build-${{ env.BUILD_GROUP_NUMBER }}" # tag name to delete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_GROUP_NUMBER: ${{ steps.buildgroupnumber.outputs.BUILD_GROUP_NUMBER }}
      - name: Slack - Error
        env:
          SLACK_CUSTOM_PAYLOAD: '{\"level\": \"error\", \"message\": \"Server [build ${{ env.BUILD_GROUP_NUMBER }}](${{ env.BUILD_URL }}) deployment failed\", \"text\": \"Server <${{ env.BUILD_URL }}|build ${{ BUILD_GROUP_NUMBER }}> deployment failed\"}'
        if: failure()
        uses: Ilshidur/action-slack@2.0.2
      - name: Slack - Success
        env:
          SLACK_CUSTOM_PAYLOAD: '{\"level\": \"info\", \"message\": \"Server [build ${{ env.BUILD_GROUP_NUMBER }}](${{ env.BUILD_URL }}) deployed\", \"text\": \"Server <${{ env.BUILD_URL }}|build ${{ env.BUILD_GROUP_NUMBER }}> deployed\"}'
        uses: Ilshidur/action-slack@2.0.2
        

      


        
